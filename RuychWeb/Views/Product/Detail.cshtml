@using RuychWeb.Areas.Admin.Models
@using Newtonsoft.Json
@model ProductViewModel
@* @{ *@
@*     var colorSizesDict = Model.Colors?.ToDictionary( *@
@*         c => c.ColorName, *@
@*         c => c.Sizes?.Select(s => s.Size).ToList() ?? new List<string>() *@
@*     ) ?? new Dictionary<string, List<string>>(); *@
@* } *@
<style>
    .custom-dropdown {
        position: relative;
        display: inline-block;
        width: 100%;
    }

    .dropdown-display {
        padding: 10px;
        background-color: white;
        border-radius: 8px;
        text-align: center;
        border: 1px solid #ccc;
        cursor: pointer;
    }

    .grid-box {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
        position: absolute;
        bottom: 100%; /* hiển thị lên trên */
        left: 0;
        background-color: white;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 12px;
        margin-bottom: 8px;
        z-index: 1000;
    }

    .size-cell {
        padding: 10px;
        background-color: white;
        color: black;
        font-weight: bold;
        text-align: center;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .size-cell:hover:not(.disabled) {
            background-color: #f0f0f0;
        }

        .size-cell.disabled {
            background-color: #bbb;
            color: #666;
            cursor: not-allowed;
            opacity: 0.5;
        }

    .quantity-dropdown-grid {
        position: relative;
        width: 100%;
        max-width: 250px;
    }

    .quantity-display {
        border: 1px solid #ccc;
        padding: 10px;
        background-color: #fff;
        cursor: not-allowed;
        text-align: center;
        border-radius: 8px;
    }

    .quantity-grid {
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 8px;
        background-color: rgba(0, 0, 0, 0.5); /* nền đen mờ */
        padding: 10px;
        border-radius: 10px;
    }

    .quantity-cell {
        padding: 10px;
        text-align: center;
        background-color: white;
        border-radius: 6px;
        font-weight: bold;
        color: black;
        transition: 0.3s;
        cursor: pointer;
    }

        .quantity-cell:hover:not(.disabled) {
            background-color: #dcdcdc;
        }

        .quantity-cell.disabled {
            background-color: #ccc;
            color: #888;
            cursor: not-allowed;
            opacity: 0.5; /* làm mờ cell bị disable */
        }

    #slider {
        display: none;
    }

    .btn {
        margin-top: 10px;
    }

        .btn.btn-primary {
            font-size: 16px;
            color: white;
            background: #fe980f;
            border: 0 none;
            border-radius: 5px;
        }

    h3 {
        margin: 0;
        font-size: 24px;
    }

    button#toggleSizeGuideBtn {
        font-size: 16px;
        margin-bottom: 16px;
    }
</style>

<div class="container py-4">
    <nav>
        <a href="/">Product List</a> |
        <a href="/Product/Category/@Model.CategoryName">@Model.CategoryName</a> |
        <strong>@Model.Name</strong>
    </nav>

    <form method="post" asp-controller="Cart" asp-action="AddToCart">
        <input type="hidden" name="ProductId" value="@Model.ProductId" />
        <input type="hidden" name="ProductName" value="@Model.Name" />
        <input type="hidden" name="Image" value="@Model.Thumbnail" />
        <input type="hidden" name="Price" value="@Model.Price" />
        <input type="hidden" name="MaxQuantity" id="MaxQuantity" />
        @{
            var discount = Model.Sales?.FirstOrDefault()?.Discount ?? 0;
        }
        <input type="hidden" name="Discount" id="Discount" value="@discount" />
        <input type="hidden" name="DiscountedPrice" id="DiscountedPrice" value="@Model.DiscountedPrice" />

        <div class="row mt-4">
            <!-- Hình ảnh -->
            <div class="col-md-6">
                <img src="/images/Products/@Model.Thumbnail" alt="@Model.Name" class="img-fluid" style="max-height: 400px;" />
            </div>

            <!-- Thông tin sản phẩm -->
            <div class="col-md-6">
                <h3 class="fw-bold text-uppercase">@Model.Name</h3>
                @if (Model.DiscountedPrice < Model.Price)
                {
                    <h4 class="text-danger fw-bold">
                        @Model.DiscountedPrice.ToString("N0") VND
                        <span style="text-decoration: line-through; color: gray; margin-left: 10px;">
                            @Model.Price.ToString("N0") VND
                        </span>
                    </h4>
                }
                else
                {
                    <h4 class="text-danger fw-bold">@Model.Price.ToString("N0") VND</h4>
                }
                <!-- Màu sắc -->
                <div class="my-3">
                    <p><strong>MÀU SẮC</strong></p>
                    @foreach (var color in Model.Colors.Select((value, index) => new { value, index }))
                    {

                        var cssColor = GetColorCode(color.value.ColorName);
                        string radioId = $"color_{color.index}";
                        <input type="radio" name="Color" id="@radioId" value="@color.value.ColorName" style="display:none" class="d-none color-radio" required />
                        <label for="@radioId" class="color-label" style="cursor: pointer; display: inline-block; margin-right: 8px;">
                            <span class="color-circle" style="display:inline-block; width:25px; height:25px; background-color:@cssColor; border:2px solid black; border-radius:50%; transition: all 0.3s;"></span>
                        </label>
                    }
                </div>

                <!-- Size & số lượng -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="fw-bold">SIZE</label>
                        <div class="custom-dropdown">
                            <div id="sizeDisplay" class="dropdown-display">Please select size</div>
                            <div id="sizeGrid" class="grid-box" style="display: none;"></div>
                            <input type="hidden" name="Size" id="selectedSize" required />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <label class="fw-bold d-block mb-2">SỐ LƯỢNG</label>
                        <div class="quantity-dropdown-grid">
                            <div class="quantity-display" id="quantityDisplay">0</div>
                            <div class="quantity-grid" id="quantityGrid" style="display: none;">
                                @for (int i = 1; i <= 12; i++)
                                {
                                    <div class="quantity-cell" data-value="@i">@i</div>
                                }
                            </div>
                            <input type="hidden" name="Quantity" id="selectedQuantity" value="1" />
                        </div>
                    </div>
                </div>

                <!-- Nút hành động -->
                <div class="d-flex gap-2 mb-3">
                    <button type="submit" class="btn btn-primary detailcart">THÊM VÀO GIỎ HÀNG</button>
                </div>

                <!-- Mô tả -->
                <div>
                    <h5 class="fw-bold">THÔNG TIN SẢN PHẨM</h5>
                    <p>@Html.Raw(@Model.Description.Replace("-", "<br /> -"))</p>
                </div>
                <button type="button" class="btn btn-outline-dark btn-sm mt-3 rounded-pill shadow-sm px-4" id="toggleSizeGuideBtn">
                    📏 Xem hướng dẫn chọn size
                </button>

                <!-- Ảnh minh họa size -->
                <div id="sizeGuideImage" class="mt-3 text-center" style="display: none;">
                    <img src="/images/size.png" alt="Size Guide" class="img-fluid rounded shadow" style="max-height: 300px;" />
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        const fullColorData = @Html.Raw(JsonConvert.SerializeObject(Model.Colors));
        const sizeGrid = document.getElementById('sizeGrid');
        const sizeDisplay = document.getElementById('sizeDisplay');
        const selectedSize = document.getElementById('selectedSize');
        const quantityDisplay = document.getElementById('quantityDisplay');
        const quantityGrid = document.getElementById('quantityGrid');
        const selectedQuantity = document.getElementById('selectedQuantity');
        const maxQuantityInput = document.getElementById('MaxQuantity');
        const fixedSizes = ["M", "L", "XL", "XXL"];
        let isSizeSelected = false;

        // Hiển thị grid size dựa trên color được chọn
        function renderSizes(sizes) {
            sizeGrid.innerHTML = "";
            const sizeMap = {};
            sizes.forEach(s => sizeMap[s.Size] = s.Quantity);

            fixedSizes.forEach(size => {
                const div = document.createElement("div");
                div.classList.add("size-cell");
                div.dataset.size = size;
                const quantity = sizeMap[size] || 0;
                div.dataset.qty = quantity;
                div.innerText = size;

                if (quantity <= 0) {
                    div.classList.add("disabled");
                }

                sizeGrid.appendChild(div);
            });

            // Gán sự kiện click cho từng size hợp lệ
            document.querySelectorAll('.size-cell').forEach(cell => {
                const qty = parseInt(cell.dataset.qty);
                if (qty <= 0) return;

                cell.addEventListener('click', function () {
                    selectedSize.value = this.dataset.size;
                    sizeDisplay.textContent = this.dataset.size;
                    updateMaxQuantity(qty);
                    quantityDisplay.textContent = "Chọn số lượng";
                    selectedQuantity.value = "";
                    quantityGrid.style.display = 'grid';
                    sizeGrid.style.display = 'none';
                    isSizeSelected = true;
                });
            });

            // Reset sau mỗi lần chọn màu mới
            selectedSize.value = "";
            sizeDisplay.textContent = "Chọn size";
            selectedQuantity.value = "";
            quantityDisplay.textContent = "Chọn số lượng";
            isSizeSelected = false;
        }

        // Cập nhật số lượng tối đa dựa trên size được chọn
        function updateMaxQuantity(maxQty) {
            maxQuantityInput.value = maxQty;
            document.querySelectorAll('.quantity-cell').forEach(cell => {
                const val = parseInt(cell.dataset.value);
                if (val > maxQty) {
                    cell.classList.add('disabled');
                    cell.style.cursor = "not-allowed";
                } else {
                    cell.classList.remove('disabled');
                    cell.style.cursor = "pointer";
                }
            });

            const curVal = parseInt(selectedQuantity.value);
            if (curVal > maxQty || isNaN(curVal)) {
                selectedQuantity.value = "";
                quantityDisplay.textContent = "Chọn số lượng";
            }
        }

        // Xử lý chọn số lượng
        document.querySelectorAll('.quantity-cell').forEach(cell => {
            cell.addEventListener('click', function () {
                if (!isSizeSelected || this.classList.contains('disabled')) return;
                selectedQuantity.value = this.dataset.value;
                quantityDisplay.textContent = this.dataset.value;
                quantityGrid.style.display = 'none';
            });
        });

        // Hiển thị/ẩn size grid
        sizeDisplay.addEventListener('click', () => {
            sizeGrid.style.display = sizeGrid.style.display === 'none' ? 'grid' : 'none';
        });

        // Hiển thị/ẩn quantity grid
        quantityDisplay.addEventListener('click', () => {
            if (!isSizeSelected) return;
            quantityGrid.style.display = quantityGrid.style.display === 'none' ? 'grid' : 'none';
        });

        // Xử lý chọn màu
        document.querySelectorAll(".color-label").forEach((label, index) => {
            label.addEventListener("click", function () {
                // Reset kích thước các màu khác
                document.querySelectorAll('.color-circle').forEach(c => {
                    c.style.width = '25px';
                    c.style.height = '25px';
                });

                const circle = label.querySelector('.color-circle');
                circle.style.width = '35px';
                circle.style.height = '35px';

                const radio = label.previousElementSibling;
                radio.checked = true;

                const selectedColor = fullColorData.find(c => c.ColorName === radio.value);
                if (selectedColor) {
                    renderSizes(selectedColor.Sizes);
                }
            });

            // Chọn màu đầu tiên khi load trang
            if (index === 0) {
                label.click();
            }
        });

        document.getElementById("toggleSizeGuideBtn").addEventListener("click", function () {
            const img = document.getElementById("sizeGuideImage");
            img.style.display = (img.style.display === "none") ? "block" : "none";
        });

        // localStorage
        window.addEventListener("DOMContentLoaded", function () {
            const addToCartButton = document.querySelector(".detailcart");

            addToCartButton.addEventListener("click", function (e) {
                e.preventDefault();

                const isLoggedIn = '@User.Identity.IsAuthenticated'.toLowerCase() === 'true';

                if (isLoggedIn) {
                    // Gửi form đến server
                    document.querySelector("form").submit();
                } else {
                    // Lưu vào localStorage nếu chưa đăng nhập
                    const product = {
                        productId: document.querySelector('input[name="ProductId"]').value,
                        productName: document.querySelector('input[name="ProductName"]').value,
                        image: document.querySelector('input[name="Image"]').value,
                        price: parseFloat(document.querySelector('input[name="Price"]').value), // Giá gốc
                        discountedPrice: parseFloat(document.querySelector('input[name="DiscountedPrice"]').value) || null, // Giá giảm
                        discount: parseFloat(document.querySelector('input[name="Discount"]').value) || null, // Giá giảm
                        color: document.querySelector('input[name="Color"]:checked')?.value,
                        size: document.querySelector('input[name="Size"]').value,
                        quantity: parseInt(document.querySelector('input[name="Quantity"]').value),
                        maxQuantity: parseInt(document.getElementById('MaxQuantity').value), // Số lượng tối đa
                    };

                    if (!product.color || !product.size || !product.quantity) {
                        alert("Vui lòng chọn đầy đủ thông tin sản phẩm!");
                        return;
                    }

                    let cart = JSON.parse(localStorage.getItem("cart")) || [];
                    const existingProduct = cart.find(
                        (item) =>
                            item.productId === product.productId &&
                            item.color === product.color &&
                            item.size === product.size
                    );

                    if (existingProduct) {
                        // Kiểm tra nếu số lượng mới vượt quá MaxQuantity
                        if (existingProduct.quantity + product.quantity > product.maxQuantity) {
                            alert(`Số lượng tối đa cho sản phẩm này là ${product.maxQuantity}.`);
                            return;
                        }
                        existingProduct.quantity += product.quantity;
                    } else {
                        cart.push(product);
                    }

                    localStorage.setItem("cart", JSON.stringify(cart));
                    alert("Sản phẩm đã được thêm vào giỏ hàng!");
                    window.location.href = '/Cart';
                }
            });
        });
    </script>

    @functions {
    string GetColorCode(string colorName)
    {
        return colorName switch
        {
            "Black" => "#000000",
            "White" => "#FFFFFF",
            "Blue" => "#0000FF",
            "Red" => "#FF0000",
            "Yellow" => "#FFFF00",
            "Lime" => "#00FF00",
            "Silver" => "#C0C0C0",
            "Gray" => "#808080",
            "Maroon" => "#800000",
            "Olive" => "#808000",
            "Green" => "#008000",
            "Purple" => "#800080",
            "Teal" => "#008080",
            "Navy" => "#000080",
            _ => "#CCCCCC"
        };
    }
    }
}
